{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#1120-17th-august-2024","title":"1.12.0 [17th August 2024]","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li>Colour-coding of methods in the collection browser.</li> <li>Added FAQ to website.</li> </ul>"},{"location":"CHANGELOG/#1110-15th-august-2024","title":"1.11.0 [15th August 2024]","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>This file, <code>CHANGELOG.md</code>.</li> <li>Launch docs website.</li> <li>Duplicate request (with new request popup) under cursor in tree with D.</li> <li>\"Quick\" duplicate request (without new request popup, request name is auto-generated) under cursor in tree with Shift+D.</li> <li>Delete request (with confirmation modal) under cursor in tree with Backspace.</li> <li>\"Quick\" delete request (without confirmation modal) under cursor in tree with Shift+Backspace.</li> <li>\"Quit Posting\" added to command palette.</li> <li>Move the sidebar to the right or left using <code>collection_browser.position: 'right' | 'left'</code> config.</li> <li>Refinements to \"galaxy\" theme.</li> <li>\"galaxy\" theme is now default.</li> <li>Help text added to \"empty state\" in the collection browser.</li> <li>Extend info in the \"Collection Browser\" help modal.</li> <li>Visual indicator (a red bar on the left) on Input fields that contain invalid values.</li> <li>Toast message now appears when trying to submit the 'new request' modal with invalid values.</li> <li>Public roadmap (initial brain-dump version).</li> </ul>"},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Ensure the location of the request on disk in the <code>Info</code> tab wraps instead of clipping out of view.</li> <li>Inserting requests in sorted position on creation.</li> <li>Prevent creating requests with no name.</li> <li>Prevent writing paths in the file-name field in the new request modal.</li> <li>Prevent specifying paths outside of the open collection dir in the directory field in the new request modal.</li> <li>Fix variables not being substituted into several fields, including auth.</li> </ul>"},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Upgrade to Textual version 0.76.0</li> <li>Change logic to render bindings in help modal to reflect new Textual API.</li> <li>Sort order of requests in the tree improved.</li> </ul> <p>Note</p> <p>Changes prior to 1.11.0 are not documented here. Please see the Releases page on GitHub for information on changes prior to 1.11.0.</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#using-posting","title":"Using Posting","text":""},{"location":"faq/#how-do-i-edit-headers-or-query-parameters","title":"How do I edit headers or query parameters?","text":"<p>Right now, you need to delete the row and re-create it with the correct values. Inline editing is planned, but not yet implemented.</p>"},{"location":"faq/#contributing","title":"Contributing","text":""},{"location":"faq/#how-do-i-suggest-a-feature","title":"How do I suggest a feature?","text":"<p>You can suggest a feature by opening a Discussion on the GitHub repository under the \"Ideas\" category.</p>"},{"location":"faq/#how-do-i-report-a-bug","title":"How do I report a bug?","text":"<p>You can report a bug by opening an Issue on the GitHub repository.</p>"},{"location":"faq/#how-do-i-contribute-code-to-posting","title":"How do I contribute code to Posting?","text":"<p>You can contribute code to Posting by opening a Pull Request on the GitHub repository.</p> <p>However, reporting bugs and suggesting features is also a great way to contribute!</p> <p>A guide to contributing is coming soon.</p>"},{"location":"faq/#general","title":"General","text":""},{"location":"faq/#how-was-posting-built","title":"How was Posting built?","text":"<p>Posting is built using Textual, a Python framework for building terminal-based applications.</p>"},{"location":"faq/#who-is-the-original-creator-of-posting","title":"Who is the original creator of Posting?","text":"<p>Posting was originally created by Darren Burns, an open-source developer from Scotland, UK.</p>"},{"location":"roadmap/","title":"Roadmap","text":""},{"location":"roadmap/#about-this-document","title":"About this document","text":"<p>This is a very high level overview of what I'm planning on working on.</p> <p>It's unrefined and unordered at the moment, but I would like to work with the community to refine and prioritize this list in the future.</p> <p>If you have any feedback or suggestions, please open a new discussion on GitHub. Opening a discussion helps me understand what's important to the community, as others can upvote it if they're interested.</p>"},{"location":"roadmap/#the-roadmap","title":"The Roadmap","text":"<ul> <li>Variable completion autocompletion TextAreas.</li> <li>Variable resolution highlighting in TextAreas.</li> <li>Bearer token auth (can be done now by adding header).</li> <li>API key auth (can be done now by adding header).</li> <li>OAuth2 (need to scope out what's involved here).</li> <li>Add \"quit\" to command palette and footer \u2705</li> <li>Duplicate request from the tree. \u2705</li> <li>Quickly duplicate request from the tree \u2705</li> <li>Colour-coding for request types (i.e. GET is green, POST is blue, etc.) \u2705</li> <li>Delete request from the tree. \u2705</li> <li>Add rotating logging</li> <li>Inserting into the collection tree in sorted order, not at the bottom \u2705</li> <li>Improved distribution (move beyond pipx, e.g. <code>brew</code>) Cancelled</li> <li>Adding test framework.</li> <li>More user friendly errors.</li> <li>Keymaps.</li> <li>I could host themes as YAML files online and offer a <code>posting themes install foo</code> which would download and move the file to the users theme directory, which would then be loaded on startup. The app could potentially even have a builtin theme \"browser\" which lets people preview themes (download the YAML from GitHub into memory to preview it in your app).</li> <li>Add contributing guide.  </li> <li>External documentation. \u2705</li> <li>Uploading files.</li> <li>Making it clear which HTTP headers are set automatically.  </li> <li>Enabling and disabling rows in tables.</li> <li>Highlighting variables in tables to show if they've resolved or not.  </li> <li>(Maybe) File watchers so that if the request changes on disk then the UI updates to reflect it.</li> <li>Pre-request and post-response scripts and assertions.  </li> <li>Custom themes, loaded from theme directory. \u2705</li> <li>Cookie editor.</li> <li>Dynamic in-app help system \u2705</li> <li>Specify certificate path via config or CLI \u2705</li> <li>Import from Insomnia and Postman.</li> <li>Improving OpenAPI import feature.</li> <li>General UX polish and removing footguns: validation, unsurprising navigation, warning when switching request when there are unsaved changes.</li> </ul>"},{"location":"guide/","title":"Getting Started","text":""},{"location":"guide/#installation","title":"Installation","text":"<p>Posting can be installed in a matter of seconds on MacOS, Linux, and Windows.</p>"},{"location":"guide/#rye-recommended","title":"Rye (recommended)","text":"<p>Rye is recommended, as it is faster than Homebrew and <code>pipx</code> by several orders of magnitude:</p> <pre><code># Install Rye (on MacOS/Linux only - Windows users see below)\ncurl -sSf https://rye.astral.sh/get | bash\n\n# install Posting\nrye install posting\n</code></pre> <p>Windows users should follow the guide Rye to learn how to install Rye.</p>"},{"location":"guide/#pipx","title":"pipx","text":"<p>If you prefer, you can install Posting via <code>pipx</code>.</p> <pre><code>pipx install posting\n</code></pre> <p>The methods above will both install Posting globally, in an isolated environment. Do not attempt to install Posting with <code>pip</code>.</p> Homebrew is not supported <p>Installing via Homebrew is not supported, as some of Posting's Rust and C dependencies can take over 10 minutes to compile. When using Rye, installation time is measured in tens of milliseconds, and with <code>pipx</code> it's just a few seconds.</p>"},{"location":"guide/#a-quick-introduction","title":"A quick introduction","text":"<p>This introduction will show you how to create a simple POST request to the JSONPlaceholder mock API to create a new user. It focuses on an efficient keyboard-driven workflow, but you can also use the mouse if you prefer.</p>"},{"location":"guide/#collections-and-requests","title":"Collections and requests","text":"<p>A collection is simply a directory which may contain requests saved by Posting.</p> <p>If you launch Posting without specifying a collection, any requests you create will be saved in the \"default\" collection. This is a directory reserved by Posting on your filesystem, and unrelated to the directory you launched Posting from.</p> <p>This is fine for quick throwaway requests, but you'll probably want to create a new collection for each project you work on so that you can check it into version control.</p> <p>To create a new collection, simply create a new directory and pass it into Posting:</p> <pre><code>mkdir my-collection\nposting --collection my-collection\n</code></pre> <p>Now, any requests you create will be saved in the <code>my-collection</code> directory as simple YAML files with the <code>.posting.yaml</code> extension.</p>"},{"location":"guide/#creating-a-request","title":"Creating a request","text":"<p>When you launch Posting, no request is open, so the UI will look rather empty.</p> <p>Let's create a simple POST request to the JSONPlaceholder mock API to create a new user.</p> <p>Press Ctrl+T to open the request method dropdown, then press P to quickly select the <code>POST</code> method.</p> <p>Press Tab to move focus to the next widget, which is the URL bar. The URL bar can also be focused with Ctrl+L. Type <code>https://jsonplaceholder.typicode.com/users</code> into the URL bar.</p>"},{"location":"guide/#adding-a-json-body","title":"Adding a JSON body","text":"<p>Press Ctrl+O to enter \"jump mode\", then press W to quickly jump to the \"Body\" tab.</p> <p>Press J (or Down) to move the cursor down to the dropdown. Press Enter to open it, and select the option <code>Raw (json, text, etc.)</code>.</p> <p>Move down to the text area below using J (or Down), and type (or paste) the JSON below. </p> <pre><code>{\n  \"name\": \"John Doe\",\n  \"username\": \"johndoe\",\n  \"email\": \"john.doe@example.com\"\n}\n</code></pre>"},{"location":"guide/#viewing-keyboard-shortcuts","title":"Viewing keyboard shortcuts","text":"<p>Now is probably a good time to note that you can see the full list of keyboard shortcuts for the focused widget by pressing F1. The text area widget in particular has a lot of useful shortcuts and supports things like undo/redo.</p>"},{"location":"guide/#sending-the-request","title":"Sending the request","text":"<p>Press Ctrl+J to send the request. This shortcut works globally.</p>"},{"location":"guide/#saving-the-request","title":"Saving the request","text":"<p>Finally, press Ctrl+S to save the request to disk. Fill out the form on the modal that appears, and press Enter or Ctrl+N to write the request to disk.</p>"},{"location":"guide/collections/","title":"Collections","text":""},{"location":"guide/collections/#overview","title":"Overview","text":"<p>A collection is just a directory on your file system which may or may not contain requests in the <code>.posting.yaml</code> format.</p> <p>There's absolutely nothing special about a collection. It contains no \"special files\" or metadata -- it's just a directory. It could even be empty. \"Collection\" is simply the name we give to the directory which we've loaded into Posting.</p>"},{"location":"guide/collections/#the-default-collection","title":"The default collection","text":"<p>If you launch Posting without any arguments, it will load the default collection, which is stored in Posting's reserved data directory on your file system. You can check where this is by running <code>posting locate collection</code>.</p> <p>This is useful to get started quickly, but you'll probably want to create your own collection directory and load it instead. This makes it easier to organize your requests and check them into version control.</p>"},{"location":"guide/collections/#creating-a-collection","title":"Creating a collection","text":"<p>A collection is just a directory, so you can create a collection by simply creating an empty directory anywhere on your file system.</p>"},{"location":"guide/collections/#loading-a-collection","title":"Loading a collection","text":"<p>If you want to load a collection, you can do so by passing the path to the collection directory to Posting:</p> <pre><code>posting --collection path/to/collection\n</code></pre>"},{"location":"guide/collections/#example","title":"Example","text":"<p>To open a collection (a directory containing requests), use the <code>--collection</code> option:</p> <pre><code>posting --collection path/to/collection\n</code></pre> <p>This will recursively find and display requests in the sidebar. If you don't supply a directory, Posting will use the default collection directory. You can check where this is by running <code>posting locate collection</code>.</p>"},{"location":"guide/command_palette/","title":"Command Palette","text":""},{"location":"guide/command_palette/#overview","title":"Overview","text":"<p>The command palette is a way to search for and execute commands in Posting.</p> <p>Some functionality in Posting can only be accessed through the command palette.</p> <p>It can be used to switch themes, show/hide parts of the UI, and more.</p>"},{"location":"guide/command_palette/#using-the-command-palette","title":"Using the command palette","text":"<p>Press Ctrl+P to open the command palette.</p>"},{"location":"guide/configuration/","title":"Configuration","text":""},{"location":"guide/configuration/#overview","title":"Overview","text":"<p>Posting can be configured using a configuration file, environment variables, and/or <code>.env</code> files.</p> <p>Configuration values are loaded in the following order of precedence (highest to lowest):</p> <ol> <li>Configuration file</li> <li>Environment variables</li> <li><code>.env</code> files</li> </ol>"},{"location":"guide/configuration/#configuration-file","title":"Configuration file","text":"<p>You can write configuration for Posting using YAML.</p> <p>The location of the config file can be checked using the command <code>posting locate config</code>.</p> <p>Here's an example configuration file:</p> <pre><code>theme: galaxy\nlayout: horizontal\nresponse:\n  prettify_json: false\nheading:\n  visible: true\n  show_host: false\n</code></pre>"},{"location":"guide/configuration/#environment-variables","title":"Environment variables","text":"<p>All configuration values can also be set as environment variables.</p> <p>Simply prefix the name of the config with <code>POSTING_</code> and set it as an environment variable.</p> <p>For nested configuration values, use <code>__</code> as the delimiter. So to set <code>heading.visible</code> to <code>false</code>, you can set the environment variable <code>POSTING_HEADING__VISIBLE=false</code>.</p> <p>For example, to set the theme to <code>galaxy</code>, you can set the environment variable <code>POSTING_THEME=galaxy</code>.</p>"},{"location":"guide/configuration/#dotenv-env-files","title":"dotenv (<code>.env</code>) files","text":"<p>Posting also supports <code>.env</code> (dotenv) files, which are useful if you want to swap out environment variable values depending on the environment you're working in (for example, \"dev\" vs \"prod\").</p> <p>You can tell Posting to use a <code>.env</code> file using the <code>--env</code> option. This option can be supplied multiple times to load multiple <code>.env</code> files.</p> <p>Here's an example <code>.env</code> file:</p> <pre><code>POSTING_THEME=\"cobalt\"\nPOSTING_LAYOUT=\"vertical\"\nPOSTING_HEADING__VISIBLE=\"false\"\n</code></pre> <p>Dotenv files are separate from collections, although you may wish to include them inside a collection to make it easy to version and share with others.</p>"},{"location":"guide/configuration/#configuring-ssl","title":"Configuring SSL","text":"<p>Posting verifies SSL certificates by default using the CA bundle provided by the <code>certifi</code> package.</p>"},{"location":"guide/configuration/#ssl-certificate-configuration","title":"SSL certificate configuration","text":"<p>Posting can load custom CA bundles from a <code>.pem</code> file.</p> <p>The easiest way to do this is in your <code>config.yaml</code> file:</p> <pre><code>ssl:\n  ca_bundle: 'absolute/path/to/certificate.pem'\n</code></pre>"},{"location":"guide/configuration/#environment-specific-certificates","title":"Environment-specific certificates","text":"<p>If the required CA bundle differs per environment, you can again use the principle that all configuration can be set as environment variables which can optionally be set and loaded using <code>--env</code> and <code>.env</code> files:</p> <pre><code># dev.env\nPOSTING_SSL__CA_BUNDLE='/path/to/certificate.pem'\n</code></pre> <p>Now load the <code>dev.env</code> file when working in the <code>dev</code> environment to ensure the dev environment CA bundle is used:</p> <pre><code>posting --env dev.env\n</code></pre>"},{"location":"guide/configuration/#disabling-ssl-verification","title":"Disabling SSL verification","text":"<p>SSL verification can be disabled on a per-request basis in the \"Options\" tab.</p>"},{"location":"guide/configuration/#client-side-certificates","title":"Client-side certificates","text":"<p>You can specify local certificates to use as a client-side certificate:</p> <pre><code>ssl:\n  certificate_path: /path/to/certificate.pem\n  key_file: /path/to/key.key  # optional\n  password: '***********'  # optional password for key_file\n</code></pre>"},{"location":"guide/configuration/#full-configuration-reference","title":"Full configuration reference","text":"<p>The table below lists all available configuration options and their environment variable equivalents, their default values, and descriptions.</p> Config Key (Env Var) Values (Default) Description <code>theme</code> (<code>POSTING_THEME</code>) <code>\"posting\"</code>, <code>\"galaxy\"</code>, <code>\"monokai\"</code>, <code>\"solarized-light\"</code>, <code>\"nautilus\"</code>, <code>\"nebula\"</code>, <code>\"alpine\"</code>, <code>\"cobalt\"</code>, <code>\"twilight\"</code>, <code>\"hacker\"</code> (Default: <code>\"posting\"</code>) Sets the theme of the application. <code>load_user_themes</code> (<code>POSTING_LOAD_USER_THEMES</code>) <code>true</code>, <code>false</code> (Default: <code>true</code>) If enabled, load user themes from the theme directory, allowing them to be specified in config and selected via the command palette. <code>load_builtin_themes</code> (<code>POSTING_LOAD_BUILTIN_THEMES</code>) <code>true</code>, <code>false</code> (Default: <code>true</code>) If enabled, load builtin themes, allowing them to be specified in config and selected via the command palette. <code>theme_directory</code> (<code>POSTING_THEME_DIRECTORY</code>) (Default: <code>${XDG_DATA_HOME}/posting/themes</code>) The directory containing user themes. <code>layout</code> (<code>POSTING_LAYOUT</code>) <code>\"vertical\"</code>, <code>\"horizontal\"</code> (Default: <code>\"horizontal\"</code>) Sets the layout of the application. <code>use_host_environment</code> (<code>POSTING_USE_HOST_ENVIRONMENT</code>) <code>true</code>, <code>false</code> (Default: <code>false</code>) Allow/deny using environment variables from the host machine in requests via <code>$env:</code> syntax. When disabled, only variables defined explicitly in <code>.env</code> files will be available for use. <code>animation</code> (<code>POSTING_ANIMATION</code>) <code>\"none\"</code>, <code>\"basic\"</code>, <code>\"full\"</code> (Default: <code>\"none\"</code>) Controls the animation level. <code>response.prettify_json</code> (<code>POSTING_RESPONSE__PRETTIFY_JSON</code>) <code>true</code>, <code>false</code> (Default: <code>true</code>) If enabled, JSON responses will be pretty-formatted. <code>response.show_size_and_time</code> (<code>POSTING_RESPONSE__SHOW_SIZE_AND_TIME</code>) <code>true</code>, <code>false</code> (Default: <code>true</code>) If enabled, the size and time taken for the response will be displayed in the response area border subtitle. <code>heading.visible</code> (<code>POSTING_HEADING__VISIBLE</code>) <code>true</code>, <code>false</code> (Default: <code>true</code>) Show/hide the app header. <code>heading.show_host</code> (<code>POSTING_HEADING__SHOW_HOST</code>) <code>true</code>, <code>false</code> (Default: <code>true</code>) Show/hide the hostname in the app header. <code>heading.show_version</code> (<code>POSTING_HEADING__SHOW_VERSION</code>) <code>true</code>, <code>false</code> (Default: <code>true</code>) Show/hide the version in the app header. <code>url_bar.show_value_preview</code> (<code>POSTING_URL_BAR__SHOW_VALUE_PREVIEW</code>) <code>true</code>, <code>false</code> (Default: <code>true</code>) Show/hide the variable value preview below the URL bar. <code>collection_browser.position</code> (<code>POSTING_COLLECTION_BROWSER__POSITION</code>) <code>\"left\"</code>, <code>\"right\"</code> (Default: <code>\"left\"</code>) The position of the collection browser on screen. <code>pager</code> (<code>POSTING_PAGER</code>) (Default: <code>$PAGER</code>) Command to use for paging text. <code>pager_json</code> (<code>POSTING_PAGER_JSON</code>) (Default: <code>$PAGER</code>) Command to use for paging JSON. <code>editor</code> (<code>POSTING_EDITOR</code>) (Default: <code>$EDITOR</code>) Command to use for opening files in an external editor. <code>ssl.ca_bundle</code> (<code>POSTING_SSL__CA_BUNDLE</code>) Absolute path (Default: <code>unset</code>) Absolute path to a CA bundle file/dir. If not set, the Certifi CA bundle will be used. <code>ssl.certificate_path</code> (<code>POSTING_SSL__CERTIFICATE_PATH</code>) Absolute path (Default: <code>unset</code>) Absolute path to a client SSL certificate file or directory. <code>ssl.key_file</code> (<code>POSTING_SSL__KEY_FILE</code>) Absolute path (Default: <code>unset</code>) Absolute path to a client SSL key file. <code>ssl.password</code> (<code>POSTING_SSL__PASSWORD</code>) Password for the key file. (Default: <code>unset</code>) Password to decrypt the key file if it's encrypted. <code>focus.on_startup</code> (<code>POSTING_FOCUS__ON_STARTUP</code>) <code>\"url\"</code>, <code>\"method\", \"collection\"</code> (Default: <code>\"url\"</code>) Automatically focus the URL bar, method, or collection browser when the app starts. <code>focus.on_response</code> (<code>POSTING_FOCUS__ON_RESPONSE</code>) <code>\"body\"</code>, <code>\"tabs\"</code> (Default: <code>unset</code>) Automatically focus the response tabs or response body text area when a response is received. <code>text_input.blinking_cursor</code> (<code>POSTING_TEXT_INPUT__BLINKING_CURSOR</code>) <code>true</code>, <code>false</code> (Default: <code>true</code>) If enabled, the cursor will blink in input widgets and text area widgets. <code>command_palette.theme_preview</code> (<code>POSTING_COMMAND_PALETTE__THEME_PREVIEW</code>) <code>true</code>, <code>false</code> (Default: <code>false</code>) If enabled, the command palette will display a preview of the selected theme when the cursor is over it. This will slow down cursor movement and so is disabled by default. <code>use_xresources</code> (<code>POSTING_USE_XRESOURCES</code>) <code>true</code>, <code>false</code> (Default: <code>false</code>) Try to create themes called <code>xresources-dark</code> and <code>xresources-light</code> (see the section below)"},{"location":"guide/environments/","title":"Environments","text":""},{"location":"guide/environments/#overview","title":"Overview","text":"<p>You can use variables in input fields and text areas using the <code>${VARIABLE_NAME}</code> or <code>$VARIABLE_NAME</code> syntax. These variables will be substituted into outgoing requests.</p> <p> </p>"},{"location":"guide/environments/#loading-variables","title":"Loading variables","text":"<p>Variables are stored in <code>.env</code> files, and loaded using the <code>--env</code> option.</p> <p>Here's what a <code>.env</code> file might look like:</p> <pre><code># file: dev.env\nAPI_KEY=\"dev-api-key\"\nENV_NAME=\"dev\"\nBASE_URL=\"https://${ENV_NAME}.example.com\"\n</code></pre> <p>To make these variables available in the UI, you can load them using the <code>--env</code> option:</p> <pre><code>posting --env dev.env\n</code></pre> <p>You can load multiple <code>.env</code> files by specifying the <code>--env</code> option multiple times:</p> <pre><code>posting --env dev.env --env shared.env\n</code></pre> <p>This allows you to build up a set of variables which are common to all environments, and then override them for specific environments.</p>"},{"location":"guide/environments/#using-environment-variables","title":"Using environment variables","text":"<p>By default, Posting will only use variables defined in <code>.env</code> files that have been explicitly loaded using the <code>--env</code> option.</p> <p>If you want to permit using environment variables that exist on the host machine (i.e. those which are not defined in any <code>.env</code> files), you must set the <code>use_host_environment</code> config option to <code>true</code> (or set the environment variable <code>POSTING_USE_HOST_ENVIRONMENT=true</code>).</p>"},{"location":"guide/environments/#practical-example","title":"Practical example","text":"<p>Imagine you're testing an API which exists in both <code>dev</code> and <code>prod</code> environments.</p> <p>The <code>dev</code> and <code>prod</code> environments share some common variables, but differ in many ways too. We can model this by having a single <code>shared.env</code> file which contains variables which are shared between environments, and then a <code>dev.env</code> and <code>prod.env</code> file which contain environment specific variables.</p> <pre><code># file: shared.env\nAPI_PATH=\"/api/v1\"\nENV_NAME=\"shared\"\n\n# file: dev.env\nAPI_KEY=\"dev-api-key\"\nENV_NAME=\"dev\"\nBASE_URL=\"https://${ENV_NAME}.example.com\"\n\n# file: prod.env\nAPI_KEY=\"prod-api-key\"\nENV_NAME=\"prod\"\nBASE_URL=\"https://${ENV_NAME}.example.com\"\n</code></pre> <p>When working in the <code>dev</code> environment, you can then load all of the shared variables and all of the development environment specific variables using the <code>--env</code> option:</p> <pre><code>posting --env shared.env --env dev.env\n</code></pre> <p>This will load all of the shared variables from <code>shared.env</code>, and then load the variables from <code>dev.env</code>. Since <code>ENV_NAME</code> appears in both files, the value from the <code>dev.env</code> file will be used since that was the last one specified.</p> <p>Note that you do not need to restart to load changes made to these files, so you can open and edit your env files in an editor of your choice alongside Posting. However, autocompletion and variable highlighting will not update until Posting is restarted.</p>"},{"location":"guide/environments/#environment-specific-config","title":"Environment specific config","text":"<p>Since all Posting configuration options can also be specified as environment variables, we can also put environment specific config inside <code>.env</code> files. There's a dedicated \"Configuration\" section in this document which covers this in more detail.</p> <p>For example, if you wanted to use a light theme in the prod environment (as a subtle reminder that you're in production!), you could set the environment variable <code>POSTING_THEME=solarized-light</code> inside the <code>prod.env</code> file.</p> <p>Note that configuration files take precedence over environment variables, so if you set a value in both a <code>.env</code> file and a <code>config.yaml</code>, the value from the <code>config.yaml</code> file will be used.</p>"},{"location":"guide/help_system/","title":"Help System","text":""},{"location":"guide/help_system/#overview","title":"Overview","text":"<p>Posting has a built-in help system, which can be used to get information about the currently focused widget.</p>"},{"location":"guide/help_system/#getting-help-for-the-focused-widget","title":"Getting help for the focused widget","text":"<p>With a widget focused, press <code>f1</code> to open a help window for that widget.</p> <p></p> <p>Most widgets offer more keybindings and functionality than meets the eye, and more than what is shown in the application footer.</p> <p>The help window explains how to use the focused widget, and lists all of the keybindings offered by it.</p>"},{"location":"guide/importing/","title":"Importing","text":""},{"location":"guide/importing/#overview","title":"Overview","text":"<p>Posting currently supports importing from OpenAPI specs.</p> <p>Support for other API formats will be added in future updates.</p>"},{"location":"guide/importing/#importing-from-openapi","title":"Importing from OpenAPI","text":"<p>This feature is experimental.</p> <p>Posting can convert OpenAPI 3.x specs into collections.</p> <p>To import an OpenAPI Specification, use the <code>posting import path/to/openapi.yaml</code> command.</p> <p>You can optionally supply an output directory.</p> <p>If no output directory is supplied, the default collection directory will be used.</p> <p>Posting will attempt to build a file structure in the collection that aligns with the URL structure of the imported API.</p>"},{"location":"guide/navigation/","title":"Navigation","text":"<p>Posting can be navigated using either mouse or keyboard.</p>"},{"location":"guide/navigation/#jump-mode","title":"Jump mode","text":"<p>Jump mode is the fastest way to get around.</p> <p>Press ctrl+o to enter jump mode, followed by the key corresponding to the widget you want to switch focus to (jump to).</p> <p> </p> <p>With the default layout, the positioning of keys on the overlays is similar to the positioning of the keys on a QWERTY keyboard.</p> <p>To exit jump mode, press esc.</p>"},{"location":"guide/navigation/#tab-navigation","title":"Tab navigation","text":"<p>tab and shift+tab will move focus between widgets, and j/k/up/down will move around within a widget.</p> <p>Some widgets have additional keybindings for navigation. You can check these by pressing f1 while it is focused.</p> <p>Where it makes sense, up and down will also move between widgets.</p>"},{"location":"guide/navigation/#contextual-help","title":"Contextual help","text":"<p>Many widgets have additional bindings for navigation other than those displayed in the footer. You can view the full list of keybindings for the currently focused widget, as well as additional usage information and tips, by pressing f1 or ctrl+? (or ctrl+shift+/).</p>"},{"location":"guide/navigation/#automatic-focus-switching","title":"Automatic focus switching","text":"<p>You can use the <code>focus.on_startup</code> and <code>focus.on_response</code> configuration options to control which widget is focused when the app starts and when a response is received.</p> Config Default value Description <code>focus.on_startup</code> <code>\"url\"</code>, <code>\"method\", \"collection\"</code> (Default: <code>\"url\"</code>) Automatically focus the URL bar, method, or collection browser when the app starts. <code>focus.on_response</code> <code>\"body\"</code>, <code>\"tabs\"</code> (Default: <code>unset</code>) Automatically focus the response tabs or response body text area when a response is received."},{"location":"guide/navigation/#exiting","title":"Exiting","text":"<p>Quit Posting by pressing ctrl+c, or by opening the command palette and selecting \"Quit\".</p>"},{"location":"guide/requests/","title":"Requests","text":""},{"location":"guide/requests/#overview","title":"Overview","text":"<p>Requests are stored directly on your file system as simple YAML files, suffixed with <code>.posting.yaml</code> - easy to read, understand, and version control!</p>"},{"location":"guide/requests/#example","title":"Example","text":"<p>Here's an example of what a request file looks like:</p> <pre><code>name: Create user\ndescription: Adds a new user to the system.\nmethod: POST\nurl: https://jsonplaceholder.typicode.com/users\nbody: \n  content: |-\n    {\n      \"firstName\": \"John\",\n      \"email\": \"john.doe@example.com\"\n    }\nheaders:\n- name: Content-Type\n  value: application/json\nparams:\n- name: sendWelcomeEmail\n  value: 'true'\n</code></pre>"},{"location":"guide/requests/#creating-a-new-request","title":"Creating a new request","text":"<p>Press Ctrl+N to create a new request.</p> <p>You'll be prompted to supply a name for the request. By default, this name is used to generate the filename, but you can also choose your own filename if you wish.</p> <p>Tip</p> <p>If you already have a collection loaded, the directory will be pre-selected based on the location of the cursor in the collection tree, so moving the cursor to the correct location before pressing Ctrl+N will save you from needing to type out the path.</p> <p>Within the \"Directory\" field of this dialog, it's important to note that <code>.</code> refers to the currently loaded collection directory (that is, the directory that was loaded using the <code>--collection</code> option), and not necessarily the current working directory.</p>"},{"location":"guide/requests/#saving-a-request","title":"Saving a request","text":"<p>Press Ctrl+S to save the currently open request.</p> <p>If you haven't saved the request yet, a dialog will appear, prompting you to give the request a name, and to select a directory to save it in.</p> <p>If the request is already saved on disk, Ctrl+S will overwrite the previous version with your new changes.</p>"},{"location":"guide/requests/#loading-requests","title":"Loading requests","text":"<p>Requests are stored on your file system as simple YAML files, suffixed with <code>.posting.yaml</code>.</p> <p>A directory can be loaded into Posting using the <code>--collection</code> option, and all <code>.posting.yaml</code> files in that directory will be displayed in the sidebar.</p>"},{"location":"guide/themes/","title":"Themes","text":""},{"location":"guide/themes/#overview","title":"Overview","text":"<p>Posting ships with several built-in themes, and also supports custom, user-made themes. With themes, you can customise most aspects of the color palette used in the application, as well as the syntax highlighting.</p>"},{"location":"guide/themes/#creating-a-theme","title":"Creating a theme","text":"<p>You can check where Posting will look for themes by running <code>posting locate themes</code> in your terminal. Place custom themes in this directory and Posting will load them on startup. Theme files must be suffixed with <code>.yaml</code>, but the rest of the filename is unused by Posting.</p> <p>Here's an example theme file:</p> <pre><code>name: example  # use this name in your config file\nprimary: '#4e78c4'  # buttons, fixed table columns\nsecondary: '#f39c12'  # method selector, some minor labels\naccent: '#e74c3c'  # header text, scrollbars, cursors, focus highlights\nbackground: '#0e1726' # background colors\nsurface: '#17202a'  # panels, etc\nerror: '#e74c3c'  # error messages\nsuccess: '#2ecc71'  # success messages\nwarning: '#f1c40f'  # warning messages\n\n# Optional metadata\nauthor: Darren Burns\ndescription: A dark theme with a blue primary color.\nhomepage: https://github.com/darrenburns/posting\n</code></pre> <p>After adding a theme, you'll need to restart Posting for it to take effect.</p> <p>To use the theme, you can specify it in your <code>config.yaml</code> file:</p> <pre><code>theme: example\n</code></pre> <p>Note that the theme name is not defined by the filename, but by the <code>name</code> field in the theme file.</p>"},{"location":"guide/themes/#syntax-highlighting","title":"Syntax highlighting","text":"<p>Syntax highlighted elements such as the URL bar, text areas, and fields which contain variables will be colored based on the semantic colors defined in the theme (<code>primary</code>, <code>secondary</code>, etc) by default.</p> <p>If you'd like more control over the syntax highlighting, you can specify a custom syntax highlighting colors inside the theme file.</p> <p>The example below illustrates some of the options available when it comes to customizing syntax highlighting.</p> <pre><code>text_area:\n  cursor: 'reverse'  # style the block cursor\n  cursor_line: 'underline'  # style the line the cursor is on\n  selection: 'reverse'  # style the selected text\n  gutter: 'bold #50e3c2'  # style the gutter\n  matched_bracket: 'black on green'  # style the matched bracket\nurl:\n  base: 'italic #50e3c2'  # style the 'base' of the url\n  protocol: 'bold #b8e986'  # style the protocol\nsyntax:\n  json_key: 'italic #4a90e2'  # style json keys\n  json_number: '#50e3c2'  # style json numbers\n  json_string: '#b8e986'  # style json strings\n  json_boolean: '#b8e986'  # style json booleans\n  json_null: 'underline #b8e986'  # style json null values\n</code></pre>"},{"location":"guide/themes/#method-styles","title":"Method styles","text":"<p>You can also specify custom styles for methods in the collection tree.</p> <p>Here's an example:</p> <pre><code>method:\n  get: 'underline #50e3c2'\n  post: 'italic #b8e986'\n  put: 'bold #b8e986'\n  delete: 'strikethrough #b8e986'\n</code></pre>"},{"location":"guide/themes/#x-resources-themes","title":"X resources themes","text":"<p>Posting supports using X resources for theming. To use this, enable the <code>use_xresources</code> option (see above).</p> <p>It requires the <code>xrdb</code> executable on your <code>PATH</code> and <code>xrdb -query</code> must return the following variables:</p> Xresources Description *color0 primary color: used for button backgrounds and fixed table columns *color8 secondary color: used in method selector and some minor labels *color1 error color: used for error messages *color2 success color: used for success messages *color3 warning color: used for warning messages *color4 accent color: used for header text, scrollbars, cursors, focus highlights *background background color *color7 surface/panel color <p>If these conditions are met, themes called <code>xresources-dark</code> and <code>xresources-light</code> will be available for use.</p>"}]}